import ioimport parserdef test_integrate_empty_file(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'OK\n'def test_integrate_one_line_file(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f.')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'OK\n'def test_integrate_good_file1(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('first.\n'                                    'first :- second.\n'                                    'first :- second, third; fourth.\n'                                    'first :- second , (third ; fourth).\n')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'OK\n'def test_integrate_good_file2(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('first :- (second).\n'                                    'first :- (second) , (third).\n'                                    'first :- second, third, fourth.\n'                                    'first :- second ; (third ; (fourth)).\n')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'OK\n'def test_integrate_no_dot(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected . in the end\n'def test_integrate_no_head(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text(':- f.')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected literal at line: 1, pos: 1\n'def test_integrate_no_body(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f :- .')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected literal at line: 1, pos: 6\n'def test_integrate_no_right_literal(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f :- g ; h, .')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected literal at line: 1, pos: 13\n'def test_integrate_unbalanced_brackets(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f :- (g; (f).')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected ) at line: 1, pos: 13\n'def test_integrate_two_operators_together(tmp_path, monkeypatch, capsys):    (tmp_path / 'a.txt').write_text('f :- g ; , r.')    monkeypatch.chdir(tmp_path)    parser.main('a.txt')    out, err = capsys.readouterr()    assert err == ''    assert out == 'Expected literal at line: 1, pos: 10\n'